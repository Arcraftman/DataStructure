/*
 *在 C++ 中，deque 和 queue 是两个常用的容器，它们都提供了对元素的顺序存储和访问功能，但它们的用途、功能和底层实现有显著的区别。以下是对它们的详细介绍和比较：
 *
 *1. std::deque（双端队列）
 *简介
 *
 *deque 是 double-ended queue（双端队列） 的缩写。
 *它是一个序列容器，支持在**两端（头部和尾部）**快速插入和删除元素。
 *与 std::vector 类似，但 deque 的内存不是连续分配的，而是分块管理的。
 *
 *头文件
 *#include <deque>
 *
 *特点
 *
 *双端操作：
 *
 *支持在头部和尾部的高效插入和删除操作。
 *
 *
 *分块存储：
 *
 *内存不是连续的，适合频繁的插入和删除操作。
 *
 *
 *随机访问：
 *
 *支持通过索引访问任意位置的元素（类似 std::vector）。
 *
 *
 *效率：
 *
 *在两端插入和删除的时间复杂度为 (O(1))。
 *中间插入和删除的时间复杂度为 (O(n))（与 std::vector 类似）。
 *
 *
 *
 *常用操作
 *| 成员函数          | 功能                                                                 |
 *|-----------------------|-------------------------------------------------------------------------|
 *| push_back(value)    | 在尾部插入元素。                                                       |
 *| push_front(value)   | 在头部插入元素。                                                       |
 *| pop_back()          | 删除尾部元素。                                                         |
 *| pop_front()         | 删除头部元素。                                                         |
 *| at(index)           | 返回指定位置的元素，带边界检查。                                       |
 *| operator[](index)   | 返回指定位置的元素，不带边界检查。                                      |
 *| front()             | 返回第一个元素。                                                       |
 *| back()              | 返回最后一个元素。                                                     |
 *| size()              | 返回容器中元素的数量。                                                 |
 *| empty()             | 检查容器是否为空。                                                     |
 *| clear()             | 清空容器中的所有元素。                                                 |
 *| insert(pos, value)  | 在指定位置插入元素。                                                   |
 *| erase(pos)          | 删除指定位置的元素。                                                   |
 *
 */

#include <iostream>
#include <deque>

int main() {
    std::deque<int> dq;

    // 在尾部插入
    dq.push_back(10);
    dq.push_back(20);

    // 在头部插入
    dq.push_front(5);

    // 访问元素
    std::cout << "Front: " << dq.front() << std::endl; // 输出 5
    std::cout << "Back: " << dq.back() << std::endl;   // 输出 20

    // 随机访问
    std::cout << "Element at index 1: " << dq[1] << std::endl; // 输出 10

    // 删除元素
    dq.pop_front(); // 删除头部元素
    dq.pop_back();  // 删除尾部元素

    // 遍历
    for (int val : dq) {
        std::cout << val << " ";
    }

    return 0;
}

/*
 *3. deque 和 queue 的比较
 *| 特性             | std::deque                       | std::queue                       |
 *|----------------------|----------------------------------------|----------------------------------------|
 *| 类型             | 序列容器                               | 容器适配器                             |
 *| 底层实现         | 分块存储，支持双端操作                 | 默认基于 std::deque                  |
 *| 插入/删除        | 支持在两端插入和删除                   | 只能在队尾插入，队头删除               |
 *| 随机访问         | 支持（通过索引访问元素）               | 不支持                                 |
 *| 访问接口         | front, back, operator[], at    | front, back                        |
 *| 适用场景         | 需要双端操作或随机访问时使用            | 需要严格的先进先出（FIFO）时使用        |
 *
 *4. 适用场景
 *std::deque 的适用场景
 *
 *当需要双端操作（头部和尾部插入/删除）的高效性。
 *当需要随机访问功能（类似 std::vector）。
 *适用于实现如滑动窗口、双端队列等算法。
 *
 *std::queue 的适用场景
 *
 *当需要严格的 FIFO（先进先出） 行为。
 *用于实现任务队列、消息队列等场景。
 *适合只需要访问队头和队尾，而不需要随机访问的情况。
 *
 */


