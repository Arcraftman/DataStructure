在 Java 8 中，`HashMap` 进行了重要的优化和调整，提升了性能并改进了存储结构。以下是对 Java 8 中 `HashMap` 的详细介绍，包括其工作原理和改进。

---

### **1. HashMap 的基本原理**
`HashMap` 是一个基于 **哈希表** 实现的键值对（`key-value`）数据结构，用于快速存储和检索数据。

- **核心特点**：
  1. 时间复杂度接近 `O(1)`（在哈希冲突较少的情况下）。
  2. 键（`key`）是唯一的，值（`value`）可以重复。
  3. 允许键或值为 `null`：
     - 最多允许一个键为 `null`。
     - 值可以有多个 `null`。

---

### **2. HashMap 的底层数据结构**
在 Java 8 中，`HashMap` 使用了 **数组 + 链表 + 红黑树** 的混合结构来存储数据。

- **数组**：
  `HashMap` 的底层以一个数组（`Node<K, V>[]`）作为主结构，称为桶（`bucket`）。
  
- **链表**：
  当不同的键通过哈希函数计算后映射到相同的桶（发生哈希冲突）时，冲突的键值对会以链表的形式存储。

- **红黑树**（Java 8 的优化）：
  - 当某个桶的链表长度超过 **8** 时，链表会转换为 **红黑树**，以提升查找效率。
  - 当树的大小减少到 **6** 以下时，会再次退化为链表。

#### 数据结构示意图：

Array:
  bucket[0] --> null
  bucket[1] --> Node1 --> Node2 --> Node3 (链表)
  bucket[2] --> TreeNode (红黑树)
  ...


---

### **3. Java 8 中的改进**

#### (1) **红黑树优化**
- Java 7 中，哈希冲突较多时，链表长度增加，最坏情况下查找性能从 `O(1)` 降为 `O(n)`。
- Java 8 引入红黑树，当桶中元素超过阈值（默认 8）时，链表会转换为红黑树，将查找性能从 `O(n)` 提升到 `O(log n)`。

#### (2) **哈希算法的优化**
- Java 8 改进了哈希函数，使哈希值的分布更加均匀，减少了哈希冲突。
- 使用了高位扰动（`hash ^ (hash >>> 16)`），提高了哈希码的随机性。

#### (3) **延迟初始化**
- Java 8 中，`HashMap` 的桶数组在首次插入元素时才会分配内存，而不是在创建对象时直接分配。

---

### **4. HashMap 的核心参数**

1. **初始容量（Initial Capacity）**：
   - 默认值：`16`。
   - 如果知道键值对的数量，可以在创建时指定容量，以减少扩容次数。

   
   HashMap<Integer, String> map = new HashMap<>(32);
   

2. **负载因子（Load Factor）**：
   - 默认值：`0.75`。
   - 当 `HashMap` 中的元素数量超过 `容量 * 负载因子` 时，触发扩容。

3. **扩容（Resize）**：
   - 每次扩容时，容量变为原来的两倍。
   - 扩容时，所有元素需要重新分布，代价较高。

---

### **5. HashMap 的常用方法**

#### **1) 添加元素**

map.put(K key, V value);

- 如果键已存在，则覆盖旧值。
- 如果键不存在，则插入新键值对。

#### **2) 获取元素**

map.get(Object key);

- 返回指定键的值，如果不存在则返回 `null`。

#### **3) 删除元素**

map.remove(Object key);

- 根据键删除元素。

#### **4) 判断键或值是否存在**

map.containsKey(Object key);
map.containsValue(Object value);


#### **5) 遍历元素**
- 使用 `for-each` 遍历：
  
  for (Map.Entry<K, V> entry : map.entrySet()) {
      System.out.println(entry.getKey() + ": " + entry.getValue());
  }
  
- 使用 Lambda 表达式：
  
  map.forEach((key, value) -> System.out.println(key + ": " + value));
  

---

### **6. HashMap 的线程安全性**
- **HashMap** 是线程不安全的，多线程环境下可能会发生数据不一致。
- 使用线程安全的替代品：
  - **`ConcurrentHashMap`**：线程安全，分段锁机制。
  - **`Collections.synchronizedMap(new HashMap<>())`**：加锁实现同步。

---

### **7. HashMap 在 Java 8 的典型问题**
#### (1) **并发修改问题**
多线程中同时修改 `HashMap`，可能会导致死循环或数据丢失。例如：

Thread 1: map.put(key1, value1);
Thread 2: map.put(key2, value2);

解决方案：使用 `ConcurrentHashMap`。

#### (2) **扩容成本较高**
扩容会触发重新哈希（rehash），对于大数据量时效率较低。解决方案：
- 在创建时设置合理的初始容量。
- 避免频繁插入导致扩容。

---

### **总结**
- **Java 8 的 HashMap 优化**：
  - 引入红黑树，提升高冲突情况下的性能。
  - 改进哈希算法，减少冲突概率。
- **性能优势**：适用于大多数单线程、高性能需求的场景。
- **线程安全性**：需要配合 `ConcurrentHashMap` 或其他机制在多线程环境中使用。

